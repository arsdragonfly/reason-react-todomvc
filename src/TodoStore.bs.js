// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Decode_AsResult_OfParseError = require("bs-decode/./src/Decode_AsResult_OfParseError.bs.js");

function makeTodoItem(text, completed, id) {
  return /* record */[
          /* text */text,
          /* completed */completed,
          /* id */id
        ];
}

function makeStore(todoItems, visibilityFilter) {
  return /* record */[
          /* todoItems */todoItems,
          /* visibilityFilter */visibilityFilter
        ];
}

function decodeTodoItem(json) {
  return Curry._2(Decode_AsResult_OfParseError.Pipeline[/* run */7], json, Curry._3(Decode_AsResult_OfParseError.Pipeline[/* field */1], "id", Decode_AsResult_OfParseError.Pipeline[/* intFromNumber */19], Curry._3(Decode_AsResult_OfParseError.Pipeline[/* field */1], "completed", Decode_AsResult_OfParseError.Pipeline[/* boolean */16], Curry._3(Decode_AsResult_OfParseError.Pipeline[/* field */1], "text", Decode_AsResult_OfParseError.Pipeline[/* string */17], Curry._1(Decode_AsResult_OfParseError.Pipeline[/* succeed */0], makeTodoItem)))));
}

function decodeStore(json) {
  return Curry._2(Decode_AsResult_OfParseError.Pipeline[/* run */7], json, Curry._3(Decode_AsResult_OfParseError.Pipeline[/* field */1], "visibilityFilter", Decode_AsResult_OfParseError.Pipeline[/* string */17], Curry._3(Decode_AsResult_OfParseError.Pipeline[/* field */1], "todoItems", Curry._1(Decode_AsResult_OfParseError.array, decodeTodoItem), Curry._1(Decode_AsResult_OfParseError.Pipeline[/* succeed */0], makeStore))));
}

function encodeTodoItem(t) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "text",
                t[/* text */0]
              ],
              /* :: */[
                /* tuple */[
                  "completed",
                  t[/* completed */1]
                ],
                /* :: */[
                  /* tuple */[
                    "id",
                    t[/* id */2]
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function encodeStore(s) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "todoItems",
                Json_encode.array(encodeTodoItem, s[/* todoItems */0])
              ],
              /* :: */[
                /* tuple */[
                  "visibilityFilter",
                  s[/* visibilityFilter */1]
                ],
                /* [] */0
              ]
            ]);
}

function setStore(s) {
  localStorage.setItem("store", JSON.stringify(encodeStore(s)));
  return /* () */0;
}

function getStore(param) {
  return decodeStore(JSON.parse(Belt_Option.getWithDefault(Caml_option.null_to_opt(localStorage.getItem("store")), "{todoItems: [], visibilityFilter: \"All\"}")));
}

function updateStore(updater) {
  return Belt_Result.map(Belt_Result.map(getStore(/* () */0), updater), setStore);
}

function addTodo(text) {
  return updateStore((function (s) {
                return /* record */[
                        /* todoItems */$$Array.append(s[/* todoItems */0], /* array */[/* record */[
                                /* text */text,
                                /* completed */false,
                                /* id */Belt_Array.reduce(s[/* todoItems */0], -1, (function (maxId, todo) {
                                        return Caml_primitive.caml_int_max(todo[/* id */2], maxId) + 1 | 0;
                                      })) + 1 | 0
                              ]]),
                        /* visibilityFilter */s[/* visibilityFilter */1]
                      ];
              }));
}

function deleteTodo(id) {
  return updateStore((function (s) {
                return /* record */[
                        /* todoItems */Belt_Array.keep(s[/* todoItems */0], (function (todo) {
                                return todo[/* id */2] === id;
                              })),
                        /* visibilityFilter */s[/* visibilityFilter */1]
                      ];
              }));
}

function editTodo(id, text) {
  return updateStore((function (s) {
                return /* record */[
                        /* todoItems */Belt_Array.map(s[/* todoItems */0], (function (todo) {
                                if (todo[/* id */2] === id) {
                                  return /* record */[
                                          /* text */text,
                                          /* completed */todo[/* completed */1],
                                          /* id */todo[/* id */2]
                                        ];
                                } else {
                                  return todo;
                                }
                              })),
                        /* visibilityFilter */s[/* visibilityFilter */1]
                      ];
              }));
}

function toggleTodo(id) {
  return updateStore((function (s) {
                return /* record */[
                        /* todoItems */Belt_Array.map(s[/* todoItems */0], (function (todo) {
                                if (todo[/* id */2] === id) {
                                  return /* record */[
                                          /* text */todo[/* text */0],
                                          /* completed */!todo[/* completed */1],
                                          /* id */todo[/* id */2]
                                        ];
                                } else {
                                  return todo;
                                }
                              })),
                        /* visibilityFilter */s[/* visibilityFilter */1]
                      ];
              }));
}

function completeAllTodos(param) {
  return updateStore((function (s) {
                var areAllMarked = Belt_Array.every(s[/* todoItems */0], (function (todo) {
                        return todo[/* completed */1];
                      }));
                return /* record */[
                        /* todoItems */Belt_Array.map(s[/* todoItems */0], (function (todo) {
                                return /* record */[
                                        /* text */todo[/* text */0],
                                        /* completed */!areAllMarked,
                                        /* id */todo[/* id */2]
                                      ];
                              })),
                        /* visibilityFilter */s[/* visibilityFilter */1]
                      ];
              }));
}

function clearCompletedTodos(param) {
  return updateStore((function (s) {
                return /* record */[
                        /* todoItems */Belt_Array.keep(s[/* todoItems */0], (function (todo) {
                                return !todo[/* completed */1];
                              })),
                        /* visibilityFilter */s[/* visibilityFilter */1]
                      ];
              }));
}

function getTodosCount(param) {
  return Belt_Result.getWithDefault(Belt_Result.map(getStore(/* () */0), (function (s) {
                    return s[/* todoItems */0].length;
                  })), 0);
}

function getCompletedCount(param) {
  return Belt_Result.getWithDefault(Belt_Result.map(getStore(/* () */0), (function (s) {
                    return Belt_Array.reduce(s[/* todoItems */0], 0, (function (count, todo) {
                                  if (todo[/* completed */1]) {
                                    return count + 1 | 0;
                                  } else {
                                    return count;
                                  }
                                }));
                  })), 0);
}

function setVisibilityFilter(filter) {
  return updateStore((function (s) {
                return /* record */[
                        /* todoItems */s[/* todoItems */0],
                        /* visibilityFilter */filter
                      ];
              }));
}

function getFilteredTodos(filter) {
  var filter$1;
  switch (filter) {
    case "Active" : 
        filter$1 = (function (todoItems) {
            return Belt_Array.keep(todoItems, (function (todo) {
                          return !todo[/* completed */1];
                        }));
          });
        break;
    case "Completed" : 
        filter$1 = (function (todoItems) {
            return Belt_Array.keep(todoItems, (function (todo) {
                          return todo[/* completed */1];
                        }));
          });
        break;
    default:
      filter$1 = (function (todoItems) {
          return todoItems;
        });
  }
  return Belt_Result.getWithDefault(Belt_Result.map(getStore(/* () */0), (function (s) {
                    return Curry._1(filter$1, s[/* todoItems */0]);
                  })), /* array */[]);
}

var Decode = 0;

exports.makeTodoItem = makeTodoItem;
exports.makeStore = makeStore;
exports.Decode = Decode;
exports.decodeTodoItem = decodeTodoItem;
exports.decodeStore = decodeStore;
exports.encodeTodoItem = encodeTodoItem;
exports.encodeStore = encodeStore;
exports.setStore = setStore;
exports.getStore = getStore;
exports.updateStore = updateStore;
exports.addTodo = addTodo;
exports.deleteTodo = deleteTodo;
exports.editTodo = editTodo;
exports.toggleTodo = toggleTodo;
exports.completeAllTodos = completeAllTodos;
exports.clearCompletedTodos = clearCompletedTodos;
exports.getTodosCount = getTodosCount;
exports.getCompletedCount = getCompletedCount;
exports.setVisibilityFilter = setVisibilityFilter;
exports.getFilteredTodos = getFilteredTodos;
/* Decode_AsResult_OfParseError Not a pure module */
