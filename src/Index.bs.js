// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Reductive = require("reductive/src/reductive.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReductiveContext = require("reductive/src/reductiveContext.js");

function appReducer(state, action) {
  return state + 1 | 0;
}

function stateSelector(state) {
  return state;
}

var appStore = Reductive.Store[/* create */0](appReducer, Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(localStorage.getItem("foo")), Caml_format.caml_int_of_string), 0), (function (store, next, action) {
        Curry._1(next, action);
        localStorage.setItem("foo", String(Reductive.Store[/* getState */5](store)));
        return /* () */0;
      }), /* () */0);

var include = ReductiveContext.Make(/* module */[]);

var Provider = include[0];

var useSelector = include[1];

var useDispatch = include[2];

var AppStore_003 = /* useStore */include[3];

var AppStore = /* module */[
  /* Provider */Provider,
  /* useSelector */useSelector,
  /* useDispatch */useDispatch,
  AppStore_003
];

function Index$App(Props) {
  var dispatch = Curry._1(useDispatch, /* () */0);
  var state = Curry._1(useSelector, stateSelector);
  return React.createElement("div", undefined, React.createElement("button", {
                  onClick: (function (_event) {
                      return Curry._1(dispatch, /* Click */0);
                    })
                }, String(state)));
}

var App = /* module */[/* make */Index$App];

ReactDOMRe.renderToElementWithId(React.createElement(Provider[/* make */0], {
          children: React.createElement(Index$App, { }),
          store: appStore
        }), "index2");

exports.appReducer = appReducer;
exports.stateSelector = stateSelector;
exports.appStore = appStore;
exports.AppStore = AppStore;
exports.App = App;
/* appStore Not a pure module */
